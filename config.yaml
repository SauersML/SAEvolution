simulation:
  num_generations: 5
  population_size: 6
  games_per_agent_target: 1 # Explicitly set: number of games each agent aims to play per generation.

agent:
  model_id: 'meta-llama/Llama-3.3-70B-Instruct'
  initial_wealth: 30.0
  initial_genome: {} # Represents an empty genome; features and their activations are learned during evolution.

evolution:
  learning_rate: 0.1

  # This identifies features activated by the model during that specific game.
  # The following parameters control how features are selected from this inspection.
  inspect_top_k: 10       # For client.features.inspect(...).top(k).
                          # This retrieves the top 'k' features that were most salient during the game transcript
                          # (based on frequency of strong activation and then sorted by aggregated_value)

  inspect_aggregate_by: "max" # Method for client.features.inspect(...) to calculate the 'salience'
                          # (the aggregated activation value associated with each feature by .top(k)).
                          # Options:
                          #   "max": Peak activation strength of the feature during the transcript.
                          #   "sum": Sum of all activation strengths for the feature.
                          #   "mean": Average activation strength when the feature was active.
                          #   "frequency": Count of tokens where the feature was active (above a small threshold).

  num_winning_features: 5 # Of the 'inspect_top_k' features identified from a WINNING game,
                          # use this many (the ones with the highest aggregated activation) to REINFORCE in the offspring.
  num_losing_features: 5  # Of the 'inspect_top_k' features identified from a LOSING game,
                          # use this many (the ones with the highest aggregated activation) to SUPPRESS in the offspring.
                          # Note: Ties result in no inspection-based genome update.

  activation_min: -5.0    # Minimum allowed activation value for a feature.
  activation_max: 5.0     # Maximum allowed activation value for a feature.
  target_positive: 1.0    # Target activation for features reinforced due to winning (if update_method is 'target').
  target_negative: -0.1   # Target activation for features suppressed due to losing (if update_method is 'target').
  update_method: 'increment' # Method for updating feature activations. Options: 'increment', 'target'.

game:
  interaction_turns_per_agent: 3 # Each agent takes this many turns in a game. Total game turns = 2 * this value.
  betting:
    strategy: 'fixed'         # Betting strategy. Options: 'fixed' (others could be implemented).
    fixed_amount: 5.0         # Bet amount if strategy is 'fixed'.
    min_bet: 1.0              # Minimum allowed bet.
    max_bet_ratio: 0.5        # Maximum bet as a ratio of an agent's current wealth (e.g., 0.5 means up to 50% of wealth).
    max_loss_multiplier: 1.0  # Multiplier for the loser's bet to determine their maximum potential loss.
    max_gain_ratio: 2.0       # Max gain for the winner as a ratio of their *own* pre-win wealth (e.g., 2.0 means winner can gain up to 1.0x their pre-win wealth from this game).

round: # Configuration for how a round of games within a generation is structured.
  pairing_strategy: 'random_shuffle' # Strategy for pairing agents for games. Options: 'random_shuffle'.

generation:
  scenario:
    prompt: |
      Generate a two-player game scenario using the following XML-style tags. Your entire output must consist ONLY of these tags and their content, in sequence. Do not include any other text, explanations, or formatting outside of the tags themselves.

      Later, you will be randomly assigned one of the roles. The game can be anything: any concept, style, description, rules, scenario, setting, constraints, etc.

      The game will be purely text-based and multi-turn. Define win criteria clearly: avoid having to tie if possible.
      
      The required tags and their expected content are:

      1.  ` <context> ... </context> `
          *   Content: Describe the game setting and relevant background information. Note, each role gets three messages each (six total).

      2.  ` <roles> ... </roles> `
          *   Content: Define the two player roles. For clarity within the content, you may structure this as "Role A: [description for Role A]" and "Role B: [description for Role B]".

      3.  ` <objectives> ... </objectives> `
          *   Content: Detail what each player or role aims to achieve. The text content *within this tag* MUST include the word 'objective'. Explain other ways to determine the objective(s) to prevent a tie from occuring.

      4.  ` <win_criteria> ... </win_criteria> `
          *   Content: Explain the conditions under which a player or role wins the game. The text content *within this tag* MUST include the phrase 'win criteria'. Explain any softer win criteria to avoid a tie.

      5.  ` <tie_criteria> ... </tie_criteria> `
          *   Content: Give reasoning for why a tie should be improbable. Explain the conditions under which the game results in a tie. Ties should typically be reserved for exceptional circumstances. If ties are not possible, explicitly state that. The text content *within this tag* MUST include the phrase 'tie criteria'.

      6.  ` <proposer_role> ... </proposer_role> `
          *   Content: Indicate which role is designated as the proposer or first mover for this game setup. The content of this tag MUST be exactly 'Role A' or 'Role B'.

      Make sure your output is only the sequence of these tags with their content.
    max_tokens: 1000
    temperature: 0.7
  response:
    prompt_template: |
      Scenario:
      {scenario}

      Your Role: {role}

      Conversation History:
      {history}

      {role} (Respond according to your role and objective):
    max_tokens: 1000
    temperature: 0.6

adjudicator:
  model_id: 'meta-llama/Llama-3.3-70B-Instruct' # Model used for both adjudication calls
  # Prompt for the first adjudication call (Scratchpad Generation)
  prompt_template_scratchpad: |
    Analyze the interaction based on the rules and objectives defined in the scenario description.
    The Interaction Transcript will label each message with an identifier like "A1" (Role A's first message), "B1" (Role B's first message), "A2", etc.

    Your task is to provide a detailed step-by-step thought process for adjudicating this game.
    The contents of your reply should be contained ONLY within a single <scratchpad> XML tag.

    Inside the <scratchpad> tag:
    - Think step-by-step about the game flow, key moments, and how each player's actions related to the win criteria and objectives.
    - Identify which role achieved its objectives or better met the win criteria, even if the objectives were not fully achieved by anyone.
    - If a winner is clear, identify the single message from the WINNING role that was most pivotal or representative of their win.
    - Also, identify the single message from the LOSING role that was most pivotal or representative of their loss or a key mistake.
    - If it's a Tie, you do not need to identify win/loss messages.
    - If there is any signal or lean as to who is doing better, you should assign a win instead of a tie.
    - Note: assign ties only when the scenario and game context is very evenly matched with no possible way to decide a winner. If one role is doing better, assign it to win.

    Scenario Description:
    {scenario}

    Interaction Transcript (with message identifiers):
    [Beginning of game transcript]
    {transcript_with_ids}
    [End of game transcript]

    Your response will be ONLY the <scratchpad> XML tag and its content. Start your response with the <scratchpad> tag now.
  max_tokens_scratchpad: 2500 # Max tokens for the scratchpad call
  temperature_scratchpad: 0.0 # Temperature for the scratchpad call

  # Prompt for the second adjudication call (Outcome and Message IDs)
  prompt_template_outcome_ids: |
    You will be provided with a Scenario Description, an Interaction Transcript, and a Scratchpad Analysis from a previous analytical step.
    Your task is to determine the final outcome of the game and identify critical messages, following the reasoning presented in the Scratchpad Analysis.
    The Interaction Transcript will label each message with an identifier like "A1", "B1", "A2", etc.

    Your entire response MUST be in XML format, containing the following tags in sequence:

    1. <outcome>
       Based SOLELY on the provided Scratchpad Analysis, determine the outcome.
       Respond with ONLY ONE of the following exact phrases: 'Role A Wins', 'Role B Wins', or 'Tie'.
       Do NOT provide any explanation or rationale within this tag. Your job is to choose which of the three to pick based on the scratchpad.
    </outcome>

    2. If the Scratchpad Analysis indicates a winner and loser (i.e., outcome is not 'Tie'):
       <win_message_id>[WINNER_MSG_ID]</win_message_id>
       <lose_message_id>[LOSER_MSG_ID]</lose_message_id>
       
       Replace [WINNER_MSG_ID] with the message identifier (e.g., A1, B2) of the winner's most critical message, AS IDENTIFIED IN THE SCRATCHPAD ANALYSIS.
       Replace [LOSER_MSG_ID] with the message identifier (e.g., B3, A2) of the loser's message most contributing to the loss, AS IDENTIFIED IN THE SCRATCHPAD ANALYSIS.
       There must be only one message ID (two characters: letter A or B, followed by a digit 1, 2, or 3) inside each of these two tags.
       Do not describe the messages or give reasoning here; defer to the scratchpad.
       If the outcome is 'Tie' (based on scratchpad), omit the <win_message_id> and <lose_message_id> tags.

    You must refer to the roles as "Role A" and "Role B".
    If the game is unfinished, judge based on the scratchpad's assessment.
    Your task is to analyze the provided game data and scratchpad, not to continue the game or re-evaluate from scratch.

    Scratchpad Analysis (from previous step):
    [Beginning of scratchpad analysis]
    {scratchpad_analysis}
    [End of scratchpad analysis]

    Scenario Description:
    {scenario}

    Interaction Transcript (with message identifiers):
    [Beginning of game transcript]
    {transcript_with_ids}
    [End of game transcript]

    Recall: complete the outcome and message ID sections now, and assign "Role A" or "Role B" to be the winner if possible. Then, indicate which message ID from the winning role contributed most to the win, and which message ID from the losing role contributed most to the loss.
    Message IDs should not contain descriptions or reasoning.

    Provide your full response using ONLY the XML tags as described. Start your response with the <outcome> tag first.
  max_tokens_outcome_ids: 5000  # Max tokens for the outcome/IDs call
  temperature_outcome_ids: 0.7 # Temperature for the outcome/IDs call

logging:
  log_level: DEBUG # Logging verbosity. Options: DEBUG, INFO, WARNING, ERROR, CRITICAL.
  log_directory: logs # Directory where log files will be saved.

state_saving:
  enabled: True # Whether to save simulation state.
  interval: 1   # Save state every N generations.
  directory: simulation_state # Base directory for saving simulation run data.

api_retries:
  max_retries: 3      # Maximum number of retries for failed API calls.
  initial_delay: 1.0  # Initial delay in seconds before the first retry.
  backoff_factor: 2.0 # Multiplier for increasing delay between retries (e.g., 1s, 2s, 4s, ...).

goodfire:
  api_key_env_var: 'GOODFIRE_API_KEY' # Name of the environment variable holding the Goodfire API key.
  base_url: null # Explicitly set to null to use the Goodfire SDK's default API URL.
