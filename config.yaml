simulation:
  num_generations: 10
  population_size: 6

agent:
  model_id: 'meta-llama/Llama-3.3-70B-Instruct' 
  initial_wealth: 30.0
  initial_genome: {} 

evolution:
  learning_rate: 0.05
  num_winning_features: 3
  num_losing_features: 3
  contrast_top_k: 10
  activation_min: -1.0
  activation_max: 1.0
  target_positive: 1.0
  target_negative: -0.5
  update_method: 'increment'

game:
  interaction_turns_per_agent: 3
  betting:
    strategy: 'fixed'
    fixed_amount: 5.0
    min_bet: 1.0
    max_bet_ratio: 0.5 
    max_loss_multiplier: 1.0 
    max_gain_ratio: 2.0 

generation:
  scenario:
    prompt: |
      Generate a concise two-player game scenario. Output ONLY valid JSON with keys: 
      'scenario_text' (string: context, roles, objectives, win/tie criteria), 
      'proposer_role' (string: 'Role A' or 'Role B').
    max_tokens: 300
    temperature: 0.7
  response:
    prompt_template: |
      Scenario:
      {scenario}

      Your Role: {role}

      Conversation History:
      {history}

      {role} (Respond according to your role and objective):
    max_tokens: 150
    temperature: 0.6

adjudicator:
  model_id: 'meta-llama/Llama-3.3-70B-Instruct'
  prompt_template: |
      Analyze the interaction based strictly on the rules and objectives defined in the scenario description.

      Scenario Description:
      {scenario}

      Interaction Transcript:
      {transcript}

      Task: Based ONLY on the scenario's win criteria and the interaction, determine the outcome. Respond with ONLY ONE of the following exact phrases: 'Role A Wins', 'Role B Wins', or 'Tie'.
  max_tokens: 20
  temperature: 0.0

logging:
  log_level: INFO 
  log_directory: logs

state_saving:
  enabled: True
  interval: 5 
  directory: simulation_state

api_retries:
  max_retries: 3
  initial_delay: 1.0
  backoff_factor: 2.0
  
goodfire:
  api_key_env_var: 'GOODFIRE_API_KEY'
